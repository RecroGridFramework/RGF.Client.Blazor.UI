<div class="rgf-splitter-container" data-rgf-state="@(Visibility == VisibilityState.Hidden ? null : "active")">
    <div class="rgf-splitter-main-panel" data-rgf-state="@(Visibility == VisibilityState.Hidden ? null : "active")">
        @MainPanel
    </div>
    <div @ref="_elementReference" @attributes="_attributes"></div>
    <div class="rgf-splitter-secondary-panel" data-rgf-state="@(Visibility == VisibilityState.Hidden ? null : "active")">
        @SecondaryPanel
    </div>
</div>

@inherits RgfBaseComponent
@code {

    [Parameter, EditorRequired]
    public RenderFragment MainPanel { get; set; } = null!;

    [Parameter, EditorRequired]
    public RenderFragment SecondaryPanel { get; set; } = null!;

    protected override void OnParametersSet()
    {
        _baseCssClass = "rgf-splitter";

        base.OnParametersSet();
    }

    protected override async Task OnAfterRenderAsync(bool firstRender)
    {
        await base.OnAfterRenderAsync(firstRender);
        if (firstRender)
        {
            await _jsRuntime.InvokeVoidAsync(RGFClientBlazorUIConfiguration.JsBlazorUiNamespace + ".Splitter.initialize", _elementReference);
        }
        else if(Visibility == VisibilityState.Hidden)
        {
            await _jsRuntime.InvokeVoidAsync(RGFClientBlazorUIConfiguration.JsBlazorUiNamespace + ".Splitter.disable", _elementReference);
        }
    }
}