<div @ref="_elementReference" @attributes="_attributes">
    <div class="rgf-splitter-primary-panel">
        @PrimaryPanel
    </div>
    <div class="rgf-splitter"></div>
    <div class="rgf-splitter-secondary-panel">
        @SecondaryPanel
    </div>
</div>

@inherits RgfBaseComponent
@code {

    [Parameter, EditorRequired]
    public RenderFragment PrimaryPanel { get; set; } = null!;

    [Parameter, EditorRequired]
    public RenderFragment SecondaryPanel { get; set; } = null!;

    [Parameter]
    public bool IsVertical { get; set; } = false;

    [Parameter]
    public bool IsResizable { get; set; } = false;

    [Parameter]
    public bool IsDisabledSplitter { get; set; } = false;

    protected override void OnParametersSet()
    {
        _baseCssClass = "rgf-splitter-container " + (IsVertical ? "vertical" : "horizontal");
        if (!IsResizable)
        {
            _baseCssClass += " w-100 h-100";
        }

        base.OnParametersSet();
    }

    protected override async Task OnAfterRenderAsync(bool firstRender)
    {
        await base.OnAfterRenderAsync(firstRender);

        if (IsDisabledSplitter)
        {
            await _jsRuntime.InvokeVoidAsync(RGFClientBlazorUIConfiguration.JsBlazorUiNamespace + ".Splitter.disable", _elementReference);
        }
        else
        {
            if (IsResizable)
            {
                await _jsRuntime.InvokeVoidAsync(RGFClientBlazorUIConfiguration.JsBlazorUiNamespace + ".Splitter.resizable", _elementReference);
            }
            await _jsRuntime.InvokeVoidAsync(RGFClientBlazorUIConfiguration.JsBlazorUiNamespace + ".Splitter.initialize", _elementReference);
        }
    }
}