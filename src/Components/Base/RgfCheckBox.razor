
<div class="@_formClass">
    <InputCheckbox Value="@Value" ValueExpression="ValueExpression" ValueChanged="OnValueChanged" DisplayName="@DisplayName" AdditionalAttributes="_attributes" />
    @if (!string.IsNullOrEmpty(Label))
    {
        <label for="@Id" class="@($"form-check-label {LabelCssClass ?? ""}".TrimEnd())">@Label</label>
    }
</div>

@inherits RgfInput<bool>
@code {

    [Parameter]
    public bool Switch { get; set; } = default;

    [Parameter]
    public bool Reverse { get; set; } = default;

    private string _formClass { get; set; } = default!;

    protected override void OnParametersSet()
    {
        AdditionalAttributes["rgf-bs-checkbox"] = "";
        if(Readonly)
        {
            Disabled = true;
        }
        _formClass = Switch ? "text-nowrap form-check form-switch" : "text-nowrap form-check";

        if(Reverse)
        {
            _formClass += " form-check-reverse";
            if (string.IsNullOrEmpty(LabelCssClass) || !LabelCssClass.Contains("pe-1"))
            {
                LabelCssClass = string.IsNullOrEmpty(LabelCssClass) ? "pe-1" : " pe-1";
            }
        }

        _baseCssClass = "form-check-input form-check";

        base.OnParametersSet();
    }
}
