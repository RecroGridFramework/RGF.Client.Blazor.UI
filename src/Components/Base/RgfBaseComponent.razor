@code {

    [Parameter]
    public string? CssClass { get; set; }

    [Parameter]
    public string? Label { get; set; }

    [Parameter]
    public string? LabelCssClass { get; set; }

    [Parameter]
    public string? Title { get; set; }

    [Parameter]
    public string? Tooltip { get; set; }

    [Parameter]
    public string? TooltipPlacement { get; set; }

    [Parameter]
    public string? DisplayName { get; set; }

    [Parameter]
    public bool Readonly { get; set; }

    [Parameter]
    public bool Disabled { get; set; }

    [Parameter]
    public string? Width { get; set; }

    [Parameter]
    public string? MinWidth { get; set; }

    [Parameter]
    public string? Height { get; set; }

    [Parameter]
    public string? Id { get; set; }

    [Parameter]
    public Dictionary<string, object> AdditionalAttributes { get; set; } = new();

    [Inject]
    protected IJSRuntime _jsRuntime { get; set; } = null!;

    protected string _baseCssClass { get; set; } = string.Empty;
    protected Dictionary<string, object>? _attributes { get; set; }
    protected ElementReference? _elementReference;

    public static string GetNextId(string format = "rgf-id-{0}") => DynamicComponentWrapper.GetNextId(format);

    protected override void OnParametersSet()
    {
        base.OnParametersSet();

        _attributes = new Dictionary<string, object>();
        if (AdditionalAttributes.Any() == true)
        {
            _attributes.AddRange(AdditionalAttributes);
        }

        _attributes["class"] = string.IsNullOrEmpty(CssClass) ? _baseCssClass : $"{_baseCssClass} {CssClass}";

        if (Id != null) { _attributes["id"] = Id; }
        if (!string.IsNullOrEmpty(Title)) { _attributes["title"] = Title; }
        if (Readonly) { _attributes["readonly"] = ""; }
        if (Disabled) { _attributes["disabled"] = ""; }

        if (Width != null || Height != null || MinWidth != null)
        {
            string style = string.Empty;
            if (AdditionalAttributes?.TryGetValue("style", out var s) == true)
            {
                style = s?.ToString() ?? string.Empty;
                if (style.Length > 0 && !style.EndsWith(";"))
                {
                    style += ";";
                }
            }
            if (Width != null)
            {
                style += $"width:{Width};";
            }
            if (MinWidth != null)
            {
                style += $"min-width:{MinWidth};";
            }
            if (Height != null)
            {
                style += $"height:{Height};";
            }
            _attributes["style"] = style;
        }
    }

    protected override async Task OnAfterRenderAsync(bool firstRender)
    {
        await base.OnAfterRenderAsync(firstRender);

        if (_elementReference != null && (!firstRender || !string.IsNullOrWhiteSpace(Tooltip)))
        {
            await _jsRuntime.InvokeVoidAsync(RGFClientBlazorUIConfiguration.JsBlazorUiNamespace + ".Base.tooltip", _elementReference, Tooltip ?? "", TooltipPlacement, "rgf-base-tooltip");
        }
    }

    protected string? GetAttribute(string key)
    {
        if (_attributes == null)
        {
            return null;
        }

        if (_attributes.TryGetValue(key, out var value))
        {
            return value?.ToString();
        }
        return null;
    }
}