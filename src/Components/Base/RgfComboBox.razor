@if (!string.IsNullOrEmpty(Label))
{
    <label for="@Id" class="@($"form-label {LabelCssClass ?? ""}".TrimEnd())">@Label</label>
}
@if (!AllowCustom)
{
    <InputSelect @ref="_inputRef" TValue="TValue" Value="@Value" ValueExpression="ValueExpression" ValueChanged="OnValueChanged" DisplayName="@DisplayName" AdditionalAttributes="_attributes">
        @if (IncludeEmptyItem && !DataSource.Any(e => string.IsNullOrEmpty(e.Value?.ToString())))
        {
            <option value=""></option>
        }
        @foreach (var option in DataSource)
        {
            <option value="@option.Key" selected="@(option.Key?.Equals(Value) == true)">@option.Value</option>
        }
    </InputSelect>
}
else
{
    <select value="@Value" @attributes="_attributes">
        @if (IncludeEmptyItem && !DataSource.Any(e => string.IsNullOrEmpty(e.Value?.ToString())))
        {
            <option value=""></option>
        }
        @foreach (var option in DataSource)
        {
            <option value="@option.Key" selected="@(option.Key?.Equals(Value) == true)">@option.Value</option>
        }
    </select>
}

@typeparam TValue
@inherits RgfInput<TValue>
@implements IAsyncDisposable
@code {
    [Parameter]
    public IEnumerable<KeyValuePair<TValue, string>> DataSource { get; set; } = default!;

    [Parameter]
    public IEnumerable<TValue>? Items { get; set; }

    [Parameter]
    public string? Text { get; set; } = null;

    [Parameter]
    public EventCallback<string> TextChanged { get; set; }

    [Parameter]
    public EventCallback<KeyValuePair<object?, string>> InputChanged { get; set; }

    [Parameter]
    public bool AllowCustom { get; set; } = false;

    [Parameter]
    public bool AllowCustomAutoSelect { get; set; } = false;

    [Parameter]
    public bool IncludeEmptyItem { get; set; } = false;

    private DotNetObjectReference<RgfComboBox<TValue>>? _selfRef { get; set; }

    private InputSelect<TValue>? _inputRef { get; set; }

    protected override void OnInitialized()
    {
        this.Id = GetNextId();
        base.OnInitialized();
    }

    protected override void OnParametersSet()
    {
        AdditionalAttributes["rgf-bs-combobox"] = "";
        _baseCssClass = "form-select form-select-sm";

        if (DataSource == null)
        {
            if (Items != null)
            {
                DataSource = Items.Select(e => new KeyValuePair<TValue, string>(e, e?.ToString() ?? string.Empty)).ToList();
            }
            else
            {
                DataSource = [];
            }
        }

        base.OnParametersSet();
    }

    protected override async Task OnParametersSetAsync()
    {
        await base.OnParametersSetAsync();

        if (_selfRef != null && Text != null)
        {
            await _jsRuntime.InvokeVoidAsync(RGFClientBlazorUIConfiguration.JsBlazorUiNamespace + ".ComboBox.setText", this.Id, this.Text);
        }
    }

    protected override async Task OnAfterRenderAsync(bool firstRender)
    {
        if (!AllowCustom)
        {
            _elementReference = _inputRef?.Element;
        }

        await base.OnAfterRenderAsync(firstRender);

        if (firstRender)
        {
            if (!DataSource.Any(e => e.Key?.Equals(Value) == true))
            {
                await _jsRuntime.InvokeVoidAsync(RGFClientBlazorUIConfiguration.JsBlazorUiNamespace + ".ComboBox.clearText", this.Id);
            }
        }

        if (AllowCustom)
        {
            if (_selfRef == null)
            {
                _selfRef = DotNetObjectReference.Create(this);
                await _jsRuntime.InvokeVoidAsync(RGFClientBlazorUIConfiguration.JsBlazorUiNamespace + ".ComboBox.initialize", _selfRef, this.Id, this.Text, this.Width);
            }
            await _jsRuntime.InvokeVoidAsync(RGFClientBlazorUIConfiguration.JsBlazorUiNamespace + ".Base.tooltip", $"#{this.Id} + input", Tooltip ?? "", TooltipPlacement, "rgf-base-tooltip");
        }
    }

    protected async Task OnValueChangedAsync(KeyValuePair<TValue, string> value)
    {
        if (Text != value.Value)
        {
            Text = value.Value;
            await TextChanged.InvokeAsync(value.Value);
        }
        ValueChanging(value.Key);
        await InputChanged.InvokeAsync(new KeyValuePair<object?, string>(Value, Text));
    }

    public bool FindItem(string text, out KeyValuePair<TValue, string> data)
    {
        if (text != null)
        {
            foreach (var item in DataSource)
            {
                if (text.Equals(item.Value?.ToString(), StringComparison.OrdinalIgnoreCase))
                {
                    data = item;
                    return true;
                }
            }
        }
        data = default;
        return false;
    }

    [JSInvokable]
    public async Task OnSelected(string key)
    {
        if (key != null)
        {
            foreach (var item in DataSource)
            {
                if (key.Equals(item.Key?.ToString(), StringComparison.OrdinalIgnoreCase))
                {
                    await OnValueChangedAsync(item);
                    break;
                }
            }
        }
    }

    [JSInvokable]
    public async Task OnEnter(string text)
    {
        if (text != null)
        {
            if (FindItem(text, out var item))
            {
                await OnValueChangedAsync(item);
                return;
            }
            try
            {
                var value = (TValue)Convert.ChangeType(text, typeof(TValue));
                await OnValueChangedAsync(new KeyValuePair<TValue, string>(value, text));
            }
            catch { }
        }
    }

    [JSInvokable]
    public async Task OnChanged(string text)
    {
        if (AllowCustomAutoSelect)
        {
            if (FindItem(text, out var item))
            {
                await OnValueChangedAsync(item);
                return;
            }
        }
        if (Text != text)
        {
            Text = text;
            await TextChanged.InvokeAsync(text);
            await InputChanged.InvokeAsync(new KeyValuePair<object?, string>(null, text));
        }
    }

    public async ValueTask DisposeAsync()
    {
        if (_selfRef != null)
        {
            await _jsRuntime.InvokeVoidAsync(RGFClientBlazorUIConfiguration.JsBlazorUiNamespace + ".ComboBox.destroy", this.Id);
            _selfRef.Dispose();
        }
    }
}