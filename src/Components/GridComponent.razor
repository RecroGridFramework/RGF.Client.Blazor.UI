
<RgfGridComponent @ref="_rgfGridRef" EntityParameters="EntityParameters" GridComponent="this"
                  ColumnTemplate="ColumnTemplate">
    <GridTemplate Context="RgfGrid">
        @if (_rgfGridRef.IsProcessing)
        {
            <SpinnerComponent ContainerClass="spinner-flex" Style="width: 3rem; height: 3rem;" />
        }
        <table @ref="_tableRef" class="recro-grid table table-sm table-bordered table-hover mb-0">
            <thead>
                <tr>
                    @foreach (var prop in EntityDesc.SortedVisibleColumns)
                    {
                        <th scope="col" title="@prop.ColTitle"
                            class="@($"rg-col-{prop.Id}") bg-body-tertiary"
                            style="@(prop.ColWidth > 0 ? $"width:{prop.ColWidth}px" : null)"
                            @oncontextmenu="(arg) => RgfGrid.ShowHeaderMenu(prop.Id, new((int)arg.ClientX, (int)arg.ClientY))" @oncontextmenu:preventDefault>
                            <div class="d-flex justify-content-between align-items-center pe-0">
                                <div class="p-1">@prop.ColTitle</div>
                                @if (prop.Orderable && Manager.EntityDesc.Options.GetBoolValue("RGO_ClientMode") != true)
                                {
                                    <RgfButton IconName="@(prop.Sort > 0 ? "bi-arrow-up" : (prop.Sort < 0) ? "bi-arrow-down" : "bi-arrow-down-up")"
                                               CssClass="@($"p-0 ms-1{(prop.Sort != 0 ? " btn-success" : "")}")"
                                               OnClick="(arg) => OnSort(arg, prop)">
                                        <sup>@(prop.Sort != 0 ? Math.Abs(prop.Sort) : "")</sup>
                                    </RgfButton>
                                }
                            </div>
                        </th>
                    }
                </tr>
            </thead>
            <tbody class="@(_rgfGridRef.IsProcessing ? "opacity-50" : null)">
                @{
                    int index = 0;
                    foreach (var rowData in RgfGrid.GridData)
                    {
                        int rowIdx = index++;
                        var attributes = rowData.Get<RgfDynamicDictionary>("__attributes");
                        string? rowClass = attributes?.Get<string>("class");
                        if (_rgfGridRef.SelectedItems.ContainsKey(ListHandler.GetAbsoluteRowIndex(rowData)))
                        {
                            rowClass = rowClass == null ? "table-primary" : rowClass + " table-primary";
                        }
                        <tr @ref="_rowRef[rowIdx]" data-row="@rowIdx"
                            class="@rowClass"
                            style="@(attributes?.Get<string>("style"))"
                            @onclick="(arg) => OnRowClick(arg, rowData, rowIdx)">
                            @foreach (var prop in EntityDesc.SortedVisibleColumns)
                            {
                                var propAttributes = attributes?.Get<RgfDynamicDictionary>(prop.Alias);
                                <td data-cell="@prop.Id"
                                    class="@(propAttributes?.Get<string>("class"))"
                                    style="@(propAttributes?.Get<string>("style"))"
                                    data-bs-toggle="@(propAttributes?.Get<string?>("data-bs-toggle"))">
                                    @RgfGrid.CreateGridColumn(prop, rowData)
                                </td>
                            }
                        </tr>
                    }
                }
            </tbody>
        </table>
    </GridTemplate>

    <ColumnSettingsTemplate>
        <GridColumnSettingsComponent BaseGridComponent="context" />
    </ColumnSettingsTemplate>
</RgfGridComponent>


@code {

    [Parameter, EditorRequired]
    public RgfEntityParameters EntityParameters { get; set; } = null!;

    private IRgManager Manager => EntityParameters.Manager!;
    private RgfGridParameters GridParameters { get => EntityParameters.GridParameters; }

    public RenderFragment<RgfGridColumnParameters> ColumnTemplate => (param) =>
    {
        if (param.PropDesc.FormType == PropertyFormType.CheckBox)
        {
            var objData = param.RowData.GetItemData(param.PropDesc.Alias);
            if (objData.Value != null)
            {
                var cssClass = objData.BooleanValue ? "bi bi-check-circle text-success" : "bi bi-dash-circle text-danger";
                return@<div class="text-center"><i class="@cssClass"></i></div>;
            }
        }
        return param.BaseGridComponent.DefaultColumnTemplate(param);
    };
}