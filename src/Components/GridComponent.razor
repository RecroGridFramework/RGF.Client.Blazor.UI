<RgfGridComponent @ref="_rgfGridRef" EntityParameters="EntityParameters" GridComponent="this"
                  ColumnTemplate="ColumnTemplate">
    <GridTemplate Context="RgfGrid">
        @if (RgfGrid.IsProcessing)
        {
            <SpinnerComponent ContainerClass="spinner-flex" Style="width: 3rem; height: 3rem;" />
        }
        <table @ref="_tableRef" class="recro-grid table table-sm table-bordered table-hover mb-0">
            <thead>
                <tr>
                    @foreach (var prop in EntityDesc.SortedVisibleColumns)
                    {
                        <RgfHtml TagName="th" @key="@prop.Id"
                                 CssClass="@($"rg-col-{prop.Id} {(Manager.IsColumnFiltered(prop) ? "table-success" : "bg-body-tertiary")}")"
                                 Style="@(prop.ColWidth > 0 ? $"width:{prop.ColWidth}px" : null)"
                                 Tooltip="@PropertyTooltips?.GetTooltip(prop.Id)"
                                 AdditionalAttributes="@(new(){ {"scope","col"} })">
                            <div class="d-flex justify-content-between align-items-center pe-0"
                                 @oncontextmenu="(arg) => RgfGrid.ShowHeaderMenu(prop.Id, new((int)arg.ClientX, (int)arg.ClientY))" @oncontextmenu:preventDefault>
                                <div class="p-1">@prop.ColTitle</div>
                                @if (prop.Orderable && Manager.EntityDesc.Options.GetBoolValue("RGO_ClientMode") != true)
                                {
                                    <RgfButton IconName="@(prop.Sort > 0 ? "bi-arrow-up" : (prop.Sort < 0) ? "bi-arrow-down" : "bi-arrow-down-up")"
                                               CssClass="@($"p-0 ms-1{(prop.Sort != 0 ? " btn-success" : "")}")"
                                               OnClick="(arg) => OnSort(arg, prop)">
                                        <sup>@(prop.Sort != 0 ? Math.Abs(prop.Sort) : "")</sup>
                                    </RgfButton>
                                }
                            </div>
                            @if (EntityParameters.ToolbarParameters.QuickFilterEnabled)
                            {
                                var clientDataType = (new[] { PropertyFormType.TextBox, PropertyFormType.TextBoxMultiLine, PropertyFormType.StaticText }).Contains(prop.FormType) ? prop.ClientDataType : ClientDataType.Undefined;
                                if (clientDataType != ClientDataType.Undefined)
                                {
                                    var data = _quickFilters.GetItemData(prop.Id.ToString());
                                    var cssClass = clientDataType switch
                                    {
                                        ClientDataType.Integer or ClientDataType.Decimal or ClientDataType.Double or ClientDataType.String =>
                                        string.IsNullOrEmpty(data.StringValue) ? null : (Manager.IsColumnFiltered(prop, data.StringValue) ? "active" : "inactive"),
                                        _ => null
                                    };
                                    <div class="quick-filter">
                                        @switch (clientDataType)
                                        {
                                            case ClientDataType.Integer:
                                                <RgfInputNumber TValue="int?" Value="data.IntValue" ValueExpression="() => data.IntValue"
                                                                CssClass="@cssClass" AdditionalAttributes="@(new(){ {"rgf-bs-grid",""} })"
                                                                ValueChanged="(arg) => OnQuickFilterChanged(prop, arg)" />
                                                break;

                                            case ClientDataType.Decimal:
                                                <RgfInputNumber TValue="decimal?" Value="data.DecimalValue" ValueExpression="() => data.DecimalValue" HideSpinButton="true"
                                                                CssClass="@cssClass" AdditionalAttributes="@(new(){ {"rgf-bs-grid",""} })"
                                                                ValueChanged="(arg) => OnQuickFilterChanged(prop, arg)" />
                                                break;

                                            case ClientDataType.Double:
                                                <RgfInputNumber TValue="double?" Value="data.DoubleValue" ValueExpression="() => data.DoubleValue" HideSpinButton="true"
                                                                CssClass="@cssClass" AdditionalAttributes="@(new(){ {"rgf-bs-grid",""} })"
                                                                ValueChanged="(arg) => OnQuickFilterChanged(prop, arg)" />
                                                break;

                                            case ClientDataType.String:
                                                <RgfInputText Value="@data.StringValue" ValueExpression="() => data.StringValue"
                                                              CssClass="@cssClass" AdditionalAttributes="@(new(){ {"rgf-bs-grid",""} })"
                                                              ValueChanged="(arg) => OnQuickFilterChanged(prop, arg)" />
                                                break;
                                        }
                                    </div>
                                }
                            }
                        </RgfHtml>
                    }
                </tr>
            </thead>
            <tbody class="@(RgfGrid.IsProcessing ? "opacity-50" : null)">
                @{
                    int index = 0;
                    foreach (var rowData in RgfGrid.GridData)
                    {
                        int rowIdx = index++;
                        var attributes = rowData.Get<RgfDynamicDictionary>("__attributes");
                        string? rowClass = attributes?.Get<string>("class");
                        if (RgfGrid.SelectedItems.ContainsKey(ListHandler.GetAbsoluteRowIndex(rowData)))
                        {
                            rowClass = rowClass == null ? "table-primary" : rowClass + " table-primary";
                        }
                        <tr @ref="_rowRef[rowIdx]" data-row="@rowIdx"
                            class="@rowClass"
                            style="@(attributes?.Get<string>("style"))"
                            @onclick="(arg) => OnRowClick(arg, rowData, rowIdx)">
                            @foreach (var prop in EntityDesc.SortedVisibleColumns)
                            {
                                var propAttributes = attributes?.Get<RgfDynamicDictionary>(prop.Alias);
                                <td data-cell="@prop.Id"
                                    class="@(propAttributes?.Get<string>("class"))"
                                    style="@(propAttributes?.Get<string>("style"))"
                                    data-bs-toggle="@(propAttributes?.Get<string?>("data-bs-toggle"))">
                                    @RgfGrid.RenderContentItem(prop, rowData)
                                </td>
                            }
                        </tr>
                    }
                }
            </tbody>
        </table>
    </GridTemplate>

    <ColumnSettingsTemplate>
        <GridColumnSettingsComponent BaseDataComponent="context" />
    </ColumnSettingsTemplate>
</RgfGridComponent>

@code {

    [Parameter, EditorRequired]
    public RgfEntityParameters EntityParameters { get; set; } = null!;

    private IRgManager Manager => EntityParameters.Manager!;
    private RgfGridParameters GridParameters => EntityParameters.GridParameters;

    private RgfDynamicDictionary _quickFilters = new RgfDynamicDictionary();

    public async Task OnQuickFilterChanged(RgfProperty property, object? value)
    {
        _quickFilters.SetMember(property.Id.ToString(), value);
        var handler = await Manager.GetFilterHandlerAsync();
        await handler.SetQuickFilterAsync(property, value);
    }

    public RenderFragment<RgfGridColumnParameters> ColumnTemplate => (param) =>
    {
        if (param.PropDesc.FormType == PropertyFormType.CheckBox)
        {
            var objData = param.RowData.GetItemData(param.PropDesc.Alias);
            if (objData.Value != null)
            {
                var cssClass = objData.BooleanValue ? "bi bi-check-circle text-success" : "bi bi-dash-circle text-danger";
                return@<div class="text-center"><i class="@cssClass"></i></div>;
            }
        }
        return param.DataComponentBase.DefaultColumnTemplate(param);
    };
}