@using Microsoft.AspNetCore.Components.Routing

@if (!_initialized)
{
    if (MenuParameters.Navbar)
    {
        <SpinnerComponent Status="Loading menu..." />
    }
    else
    {
        <SpinnerComponent Style="width: 1rem; height: 1rem;" />
    }
}
else if (_menuItems != null)
{
    if (MenuParameters.Navbar)
    {
        <nav class="navbar navbar-expand-lg bg-body-tertiary ">
            <div class="container-fluid">
                <div class="navbar-collapse">
                    <ul class="navbar-nav rgf-menu"
                        @onmouseleave="OnMouseLeave">
                        @foreach (var item in _menuItems)
                        {
                            @item
                        }
                    </ul>
                </div>
            </div>
        </nav>
    }
    else
    {
        @if (!MenuParameters.ContextMenuPosition.IsEmpty)
        {
            <ul class="rgf-menu dropdown-menu show"
                style="position: fixed; top: @(MenuParameters.ContextMenuPosition.Y)px; left: @(MenuParameters.ContextMenuPosition.X)px;"
                @onmouseleave="OnMouseLeave">
                @foreach (var item in _menuItems)
                {
                    @item
                }
            </ul>
        }
        else
        {
            <ul class="rgf-menu dropdown-menu"
                @onmouseleave="OnMouseLeave">
                @foreach (var item in _menuItems)
                {
                    @item
                }
            </ul>
        }
    }
}

@inject IRecroSecService _recroSec
@code
{
    [Parameter, EditorRequired]
    public RgfMenuParameters MenuParameters { get; set; } = null!;

    [Inject]
    private IRgfMenuService _menuService { get; set; } = null!;

    private bool _initialized = false;

    private List<RenderFragment>? _menuItems { get; set; }

    protected override async Task OnInitializedAsync()
    {
        await base.OnInitializedAsync();
        if (MenuParameters.MenuId != null)
        {
            var res = await _menuService.GetMenuAsync((int)MenuParameters.MenuId, _recroSec.UserLanguage);
            if (res.Success)
            {
                MenuParameters.MenuItems = res.Result;
            }
        }
        _initialized = true;
    }

    protected override async Task OnParametersSetAsync()
    {
        await base.OnParametersSetAsync();
        if (MenuParameters.MenuItems != null)
        {
            _menuItems = new();
            foreach (var item in MenuParameters.MenuItems)
            {
                if (MenuParameters.OnMenuRender != null)
                {
                    await MenuParameters.OnMenuRender.Invoke(item);
                }
                _menuItems.Add(MenuParameters.Navbar ? RenderNavItem(item) : RenderMenuItem(item));
            }
        }
    }

    private RenderFragment RenderNavItem(RgfMenu item) => builder =>
    {
        int sequence = 0;
        builder.OpenElement(sequence++, "li");
        builder.AddAttribute(sequence++, "class", item.MenuType == RgfMenuType.Menu ? "nav-item dropdown" : "nav-item");
        if (item.Disabled || item.MenuType == RgfMenuType.Disabled)
        {
            builder.AddMarkupContent(sequence++, $"<a class=\"nav-link dropdown-toggle disabled\">{item.Title}</a>");
        }
        else
        {
            switch (item.MenuType)
            {
                case RgfMenuType.ActionLink:
                    builder.OpenComponent(sequence++, typeof(NavLink));
                    builder.AddAttribute(sequence++, "class", $"nav-link {item.CssClass}");
                    builder.AddAttribute(sequence++, "href", item.Command);
                    builder.AddAttribute(sequence++, nameof(NavLink.ChildContent), (RenderFragment)((b) => b.AddContent(0, item.Title)));
                    builder.CloseComponent();
                    break;

                case RgfMenuType.Divider:
                    builder.AddMarkupContent(sequence++, "<div class=\"vr d-lg-flex h-100 mx-lg-2\"></div>");
                    break;

                case RgfMenuType.Menu:
                    string link = $"<a class=\"nav-link dropdown-toggle\" role=\"button\" aria-expanded=\"false\"";
                    if (!string.IsNullOrEmpty(item.Command))
                    {
                        link += $" href=\"{item.Command}\"";
                    }
                    else
                    {
                        link += $" data-bs-toggle=\"dropdown\"";
                    }
                    link += $">{item.Title}</a>";
                    builder.AddMarkupContent(sequence++, link);
                    builder.OpenComponent(sequence++, typeof(MenuComponent));
                    builder.AddAttribute(sequence++, nameof(MenuParameters), new RgfMenuParameters()
                        {
                            MenuItems = item.NestedMenu,
                            OnMenuRender = MenuParameters.OnMenuRender,
                            OnMenuItemSelect = MenuParameters.OnMenuItemSelect
                        });
                    builder.CloseComponent();
                    break;

                case RgfMenuType.Custom:
                    builder.AddMarkupContent(sequence++, string.Format(item.Command, item.Title));
                    break;
            }
        }
        builder.CloseElement();
    };

    private RenderFragment RenderMenuItem(RgfMenu item) => builder =>
    {
        int sequence = 0;
        builder.OpenElement(sequence++, "li");
        if (item.Disabled || item.MenuType == RgfMenuType.Disabled)
        {
            builder.AddMarkupContent(sequence++, $"<a class=\"dropdown-item disabled\">{item.Title}</a>");
        }
        else
        {
            switch (item.MenuType)
            {
                case RgfMenuType.ActionLink:
                    builder.AddMarkupContent(sequence++, $"<a class=\"dropdown-item\" href=\"{item.Command}\">{item.Title}</a>");
                    break;

                case RgfMenuType.Function:
                case RgfMenuType.FunctionForRec:
                    if (MenuParameters.OnMenuItemSelect != null)
                    {
                        builder.OpenElement(sequence++, "button");
                        builder.AddAttribute(sequence++, "type", "button");
                        builder.AddAttribute(sequence++, "class", "dropdown-item");
                        builder.AddAttribute(sequence++, "onclick", EventCallback.Factory.Create(this, async () => await MenuParameters.OnMenuItemSelect.Invoke(item)));
                        builder.AddContent(sequence++, item.Title);
                        builder.CloseElement();
                    }
                    break;

                case RgfMenuType.Divider:
                    builder.AddMarkupContent(sequence++, $"<hr class=\"dropdown-divider\" />");
                    break;

                case RgfMenuType.Menu:
                    builder.AddAttribute(sequence++, "class", "dropdown-submenu");
                    builder.AddMarkupContent(sequence++, $"<a class=\"dropdown-item\">{item.Title}</a>");
                    builder.OpenComponent(sequence++, typeof(MenuComponent));
                    builder.AddAttribute(sequence++, nameof(MenuParameters), new RgfMenuParameters()
                        {
                            MenuItems = item.NestedMenu,
                            OnMenuRender = MenuParameters.OnMenuRender,
                            OnMenuItemSelect = MenuParameters.OnMenuItemSelect
                        });
                    builder.CloseComponent();
                    break;

                case RgfMenuType.Custom:
                    builder.AddMarkupContent(sequence++, string.Format(item.Command, item.Title));
                    break;
            }
        }
        builder.CloseElement();
    };

    private void OnMouseLeave(MouseEventArgs e) => MenuParameters.OnMouseLeave?.Invoke();
}