@using Microsoft.AspNetCore.Components.Forms

<RgfFormComponent @ref="_rgfFormRef" EntityParameters="EntityParameters" FormComponent="this"
                  FormGroupLayoutTemplate="FormGroupLayoutTemplate"
                  FormItemLayoutTemplate="FormItemLayoutTemplate">
    <FormTemplate Context="RgfForm">
        <EditForm EditContext="RgfForm.CurrentEditContext" class="needs-validation">
            <div class="card">
                <div class="card-header">
                    <ul class="nav nav-tabs card-header-tabs" id="@_tabsId" role="tablist">
                        @for (var idx = 0; idx < RgfForm.FormData.FormTabs.Count; idx++)
                        {
                            var tab = RgfForm.FormData.FormTabs[idx];
                            <li class="nav-item" role="presentation">
                                <button class="@($"nav-link{(idx == ActiveTabIndex ? " active" : "")}")"
                                        id="@($"{_tabsId}-tab-{tab.Index}")"
                                        data-bs-toggle="tab" data-bs-target="@($"#{_tabsId}-tab-{tab.Index}-pane")" type="button" role="tab"
                                        @onclick="() => ActivateTab(tab.Index - 1)">
                                    @tab.Title
                                </button>
                            </li>
                        }
                    </ul>
                </div>
                <div class="card-body">
                    <div class="tab-content">
                        @for (var idx = 0; idx < RgfForm.FormData.FormTabs.Count; idx++)
                        {
                            var tab = RgfForm.FormData.FormTabs[idx];
                            <div class="@($"tab-pane fade show{(idx == ActiveTabIndex ? " active" : "")}")" id="@($"{_tabsId}-tab-{tab.Index}-pane")" role="tabpanel" tabindex="0">
                                @foreach (var group in tab.Groups)
                                {
                                    if (!string.IsNullOrEmpty(group.Title))
                                    {
                                        <h5 class="mt-3">@group.Title</h5>
                                    }
                                    @RgfForm.GetFormGroupLayoutTemplate(new RgfFormGroupLayoutParameters(RgfForm, group))
                                }
                            </div>
                        }
                    </div>
                </div>
            </div>
            @RgfForm.GetFormValidationTemplate()
        </EditForm>
    </FormTemplate>

    <FormItemTemplate>
        <FormItemComponent FormItemParameters="context" />
    </FormItemTemplate>

    <FormValidationTemplate>
        <div class="card mt-3">
            <div class="card-header text-bg-danger">
                @RecroDict.GetRgfUiString("Error")
            </div>
            <div class="card-body">
                <ValidationSummary />
            </div>
        </div>
    </FormValidationTemplate>
</RgfFormComponent>

@inject IJSRuntime _jsRuntime
@inject IRecroDictService RecroDict
@code {
    [Parameter, EditorRequired]
    public RgfEntityParameters EntityParameters { get; set; } = null!;

    private IRgManager Manager => EntityParameters.Manager!;
    private RgfFormParameters FormParameters { get => EntityParameters.FormParameters; }

    private RgfFormComponent _rgfFormRef { get; set; } = null!;
    private string _tabsId = RgfBaseComponent.GetNextId();
    public int ActiveTabIndex { get; private set; } = 0;
    public HashSet<int> PreviouslyActiveTabs { get; private set; } = new() { 0 };

    protected override void OnInitialized()
    {
        base.OnInitialized();
        FormParameters.ErrorCssClass = FormParameters.ErrorCssClass ?? "is-invalid";
        FormParameters.ModifiedCssClass = FormParameters.ModifiedCssClass ?? "is-valid";
    }

    protected override void OnParametersSet()
    {
        base.OnParametersSet();
        var rowIndex = FormParameters.FormViewKey.RowIndex;
        if (rowIndex != -1)
        {
            var buttons = new List<ButtonParameters>() {
                new("bi-chevron-double-left", RecroDict.GetRgfUiString("First"), async (arg) => await _rgfFormRef.FirstFormItemAsync(), "btn-secondary") { Disabled = rowIndex <= 0 },
                new("bi-chevron-left", RecroDict.GetRgfUiString("Prev"), async (arg) => await _rgfFormRef.PrevFormItemAsync(), "btn-secondary") { Disabled = rowIndex <= 0 },
                new("bi-chevron-right", RecroDict.GetRgfUiString("Next"), async (arg) => await _rgfFormRef.NextFormItemAsync(), "btn-secondary") { Disabled = rowIndex + 1 >= Manager.ItemCount.Value },
                new("bi-chevron-double-right", RecroDict.GetRgfUiString("Last"), async (arg) => await _rgfFormRef.LastFormItemAsync(), "btn-secondary") { Disabled = rowIndex + 1 >= Manager.ItemCount.Value } };
            FormParameters.DialogParameters.LeftButtons = buttons;
        }
        else
        {
            FormParameters.DialogParameters.LeftButtons = null;
        }
    }

    public RenderFragment<RgfFormGroupLayoutParameters> FormGroupLayoutTemplate => (param) =>
    @<div class="row my-2 g-2">
        @foreach (var prop in param.FormGroup.Properties)
    {
        @param.BaseFormComponent.GetFormItemLayoutTemplate(new RgfFormItemParameters(param.BaseFormComponent, param.FormGroup, prop))
    }
    </div>;

    public RenderFragment<RgfFormItemParameters> FormItemLayoutTemplate => (param) =>
    @<div name="@param.Property.ClientName" class="@($"{(param.Property.EmbededGrid ? "rg-collection" : "rg-property")} col-{param.Property.FlexColumnWidth ?? param.Group.FlexColumnWidth}")">
        @if (!string.IsNullOrEmpty(param.Property.PreElement))
    {
        @((MarkupString)param.Property.PreElement)
    }
        @param.BaseFormComponent.GetFormItemTemplate(param)
    </div>;

    private void ActivateTab(int index)
    {
        ActiveTabIndex = index;
        PreviouslyActiveTabs.Add(index);
    }
}